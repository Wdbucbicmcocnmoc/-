C251 COMPILER V5.60.0,  Read_ADC                                                           25/09/22  22:19:04  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Read_ADC
OBJECT MODULE PLACED IN .\Out_File\Read_ADC.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE Read_ADC.c XSMALL INTR2 WARNINGLEVEL(3) BROWSE INCDIR(..\..\Libraries\
                    -libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;..\USER\src) DEBUG 
                    -PRINT(.\Out_File\Read_ADC.lst) TABS(2) OBJECT(.\Out_File\Read_ADC.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          #include "myfile.h"
    3          
    4          float ADD_valu[13][6]; 
    5          float ADDD_valu[13]; 
    6          float AD_valu[13];          
    7          float GUI_AD[13];           //7路adc归一化后的值
    8          float Min_AD[13] = {1, 1, 1, 1, 1,1,1,1,1}; //最小值是1
    9          float Range = 250;  //电感值的范围是0~100
   10          int Max_Front=3;
   11          int Position_Transit[2]={0};
   12          int Position=0,Position_last=0;
   13          
   14          /*********************************************
   15          *函数：电感采集与处理函数
   16          *函数名：Read_ADC()
   17          *备注：
   18          *日期：
   19          *修改日期：
   20          *********************************************/
   21          
   22          void Read_ADC()
   23          {
   24   1          int16 i, j, k, temp;
   25   1          float  adc_valu[13][10], ad_sum[13];
   26   1      
   27   1          for (i = 0; i < 10; i++)
   28   1          {
   29   2              //中间一排和后一排
   30   2              adc_valu[0][i] = adc_once(ADC_P11, ADC_10BIT);  //最后一排左
   31   2              adc_valu[1][i] = adc_once(ADC_P13, ADC_10BIT);  //中间一排左横
   32   2              adc_valu[2][i] = adc_once(ADC_P14, ADC_10BIT);  //中间一排左斜
   33   2              adc_valu[3][i] = adc_once(ADC_P15, ADC_10BIT);  //中电感
   34   2              adc_valu[4][i] = adc_once(ADC_P16, ADC_10BIT);
   35   2              adc_valu[5][i] = adc_once(ADC_P17, ADC_10BIT);
   36   2              adc_valu[6][i] = adc_once(ADC_P05, ADC_10BIT);  //最后一排右
   37   2      
   38   2      
   39   2              adc_valu[7][i] = adc_once(ADC_P10, ADC_10BIT);  //最前一排左斜
   40   2          adc_valu[8][i] = adc_once(ADC_P06, ADC_10BIT);  //左竖
   41   2              adc_valu[9][i] = adc_once(ADC_P02, ADC_10BIT);  //最前中电感
   42   2              adc_valu[10][i] = adc_once(ADC_P01, ADC_10BIT);
   43   2              adc_valu[11][i] = adc_once(ADC_P00, ADC_10BIT);
   44   2      
   45   2           adc_valu[12][i] = adc_once(ADC_P03, ADC_10BIT);
   46   2          }
   47   1      
   48   1         for (i = 0; i < 13; i++)
   49   1          {
   50   2              for (j = 0; j < 9; j++)    
   51   2              {
   52   3                  for (k = 0; k < 9 - j; k++)
   53   3                  {
   54   4                      if (adc_valu[i][k] > adc_valu[i][k + 1])   
   55   4                      {
   56   5                          temp = adc_valu[i][k + 1];
   57   5                          adc_valu[i][k + 1] = adc_valu[i][k];
C251 COMPILER V5.60.0,  Read_ADC                                                           25/09/22  22:19:04  PAGE 2   

   58   5                          adc_valu[i][k] = temp;
   59   5                      }
   60   4                  }
   61   3              }
   62   2          } 
   63   1          
   64   1            for (i = 0; i < 13; i++) 
   65   1          {
   66   2              ad_sum[i] = adc_valu[i][3] + adc_valu[i][4] + adc_valu[i][5]+adc_valu[i][6];
   67   2              AD_valu[i] = ad_sum[i] / 4;                                
   68   2          }
   69   1          for(i = 0; i < 13; i++)
   70   1          {
   71   2            for(j = 0; j < 5; j++)
   72   2            {
   73   3              ADD_valu[i][j]=ADD_valu[i][j+1];
   74   3            }
   75   2            ADD_valu[i][j]=AD_valu[i];
   76   2          }
   77   1          for(i = 0; i < 13; i++)
   78   1          {
   79   2              ADDD_valu[i]=(ADD_valu[i][0]+ADD_valu[i][1]+ADD_valu[i][2]+ADD_valu[i][3]+ADD_valu[i][4]+ADD_valu
             -[i][5])/6;//????
   80   2          }
   81   1          for (i = 0; i < 13; i++) 
   82   1          {
   83   2              GUI_AD[i] = Range * (ADDD_valu[i] - Min_AD[i]) / (250 - Min_AD[i]);
   84   2              if (GUI_AD[i] >= Range)
   85   2                  GUI_AD[i] = Range;
   86   2              if (GUI_AD[i] < Min_AD[i])
   87   2                  GUI_AD[i] = Min_AD[i];
   88   2          }
   89   1      } 


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       928     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       534        572
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        90     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
